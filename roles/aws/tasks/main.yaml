---
# AWS
- name: Create temporary build directory for awscli
  ansible.builtin.tempfile:
    state: directory
    suffix: build
  register: aws_tmpdir

- name: Download awscli installer
  become: true
  ansible.builtin.get_url:
    url: "{{ awscli_download_url }}"
    dest: "{{ aws_tmpdir.path }}"
  changed_when: false

- name: Extract awscli installer from archive
  become: true
  ansible.builtin.unarchive:
    src: "{{ aws_tmpdir.path }}/{{ awscli_filename }}"
    dest: "{{ aws_tmpdir.path }}"
    remote_src: true
    owner: root
    group: root

- name: Test if awscli already installed
  become: true
  ansible.builtin.stat:
    path: "/usr/local/bin/aws"
  register: awsclipath

- name: Install awscli
  become: true
  ansible.builtin.command: "{{ aws_tmpdir.path }}/aws/install -i /usr/local/aws-cli -b /usr/local/bin"
  when: not awsclipath.stat.exists

- name: Update awscli
  become: true
  ansible.builtin.command: "{{ aws_tmpdir.path }}/aws/install -i /usr/local/aws-cli -b /usr/local/bin --update"
  when: awsclipath.stat.exists

- name: Set permissions on awscli binary
  become: true
  ansible.builtin.file:
    path: /usr/local/bin/aws
    mode: "0755"

- name: Set permissions on awscli files
  become: true
  ansible.builtin.file:
    path: /usr/local/aws-cli
    recurse: true
    mode: "0755"

# Localstack
- name: Create temporary build directory
  ansible.builtin.tempfile:
    state: directory
    suffix: build
  register: tmp_dir
  changed_when: false

- name: Download binary
  ansible.builtin.get_url:
    url: "{{ localstack_download_url }}"
    dest: "{{ tmp_dir.path }}"
  changed_when: false

- name: Extract from archive
  become: true
  ansible.builtin.unarchive:
    src: "{{ tmp_dir.path }}/{{ localstack_filename }}"
    dest: /usr/local/bin
    remote_src: true
    owner: root
    group: root
    mode: "0755"

# Policy Sentry
- name: Install policy_sentry
  community.general.pipx:
    name: policy_sentry
    state: latest

# Cloudsplaining
- name: Install cloudsplaining
  community.general.pipx:
    name: cloudsplaining
    state: latest

# IAM Live
- name: Create temporary build directory for iam live
  ansible.builtin.tempfile:
    state: directory
    suffix: build
  register: iam_live_tmpdir

- name: Download iam live
  become: true
  ansible.builtin.get_url:
    url: "{{ iam_live_download_url }}"
    dest: "{{ iam_live_tmpdir.path }}"
  changed_when: false

- name: Extract iamlive from archive
  become: true
  ansible.builtin.unarchive:
    src: "{{ iam_live_tmpdir.path }}/{{ iam_live_filename }}"
    dest: /usr/local/bin/
    remote_src: true
    owner: root
    group: root
    mode: "0755"
