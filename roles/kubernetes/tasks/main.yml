---
# Kubectl
- name: install kubectl asdf plugin
  ansible.builtin.shell: bash -c ". /home/{{ ansible_user }}/.asdf/asdf.sh && asdf plugin-add kubectl {{ kubectl_asdf_plugin_url }}"
  ignore_errors: true

- name: set global kubectl version to system
  ansible.builtin.shell: bash -c ". /home/{{ ansible_user }}/.asdf/asdf.sh && asdf global kubectl system"

# Minikube
- name: download minikube checksum
  ansible.builtin.uri:
    url: "{{ minikube_checksum_url }}"
    return_content: yes
  register: minikube_checksum

- name: download minikube
  become: true
  get_url:
    url: "{{ minikube_download_url }}"
    dest: /usr/local/bin/minikube
    checksum: "sha256:{{ minikube_checksum.content }}"
    owner: root
    group: root
    mode: 0755

# Lens
- name: ensure group lens exists
  become: yes
  ansible.builtin.group:
    name: lens
    state: present

- name: add the user {{ ansible_user }} to lens group
  become: yes
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: lens
    append: true

- name: check if lens is already installed
  become: yes
  stat:
    path: "{{ lens_install_dir }}"
  register: lens_dir

- name: create install directory
  become: true
  ansible.builtin.file:
    path: "{{ lens_install_dir }}"
    state: directory
    owner: root
    group: lens
    mode: 0755
  when: not lens_dir.stat.exists

- name: download lens
  become: true
  get_url:
    url: "{{ lens_download_url }}"
    dest: "{{ lens_install_dir }}/lens"
    owner: root
    group: lens
    mode: 0755
  when: not lens_dir.stat.exists

- name: create symbolic link
  become: yes
  ansible.builtin.file:
    src: "{{ lens_install_dir }}/lens"
    path: "/usr/local/bin/lens"
    state: link

- name: add lens shortcut
  become: yes
  template:
    src: lens.desktop.j2
    dest: /usr/share/applications/lens.desktop

# Helm
- name: create temporary build directory
  become: yes
  tempfile:
    state: directory
    suffix: build
  register: helm_tmp_dir
  changed_when: false

- name: download helm binary
  become: yes
  get_url:
    url: "{{ helm_download_url }}"
    dest: "{{ helm_tmp_dir.path }}"
    checksum: "sha256:{{ helm_checksum_url }}"
  changed_when: false

- name: extract from archive
  become: yes
  unarchive:
    src: "{{ helm_tmp_dir.path }}/{{ helm_filename }}"
    dest: "{{ helm_tmp_dir.path }}"
    owner: root
    group: root
    remote_src: yes

- name: copy helm file to bin
  become: yes
  copy:
    src: "{{ helm_tmp_dir.path }}/linux-amd64/helm"
    dest: /usr/local/bin
    owner: root
    group: root
    mode: 0755
    remote_src: yes

- name: install helm secrets
  command: helm plugin install https://github.com/jkroepke/helm-secrets
  ignore_errors: yes

- name: update helm secrets
  command: helm plugin update secrets

- name: install helm diff
  command: helm plugin install https://github.com/databus23/helm-diff
  ignore_errors: yes

- name: update helm diff
  command: helm plugin update diff

# Helmfile
- name: download helmfile binary
  become: yes
  get_url:
    url: "{{ helmfile_download_url }}"
    dest: /usr/local/bin/helmfile
    owner: root
    group: root
    mode: 0755

# Sops
- name: install sops
  become: yes
  apt:
    deb: "{{ sops_download_url }}"

# Fluxcd
- name: create temporary file for fluxcd download
  tempfile:
    state: file
    suffix: temp
  register: fluxcd_download_tmp

- name: download fluxcd binary
  get_url:
    url: "{{ fluxcd_download_url }}"
    dest: "{{ fluxcd_download_tmp.path }}"
    checksum: "sha256:{{ fluxcd_checksum_url }}"
    force: yes
  changed_when: false

- name: extract fluxcd from archive
  become: yes
  unarchive:
    src: "{{ fluxcd_download_tmp.path }}"
    include: flux
    dest: /usr/local/bin
    remote_src: yes
    owner: root
    group: root
    mode: 0755

- name: ensure user profile directory exists
  become: yes
  ansible.builtin.file:
    dest: /home/{{ ansible_user }}/.profile.d
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755

- name: add flux auto completion
  become: yes
  template:
    src: flux.sh.j2
    dest: /home/{{ ansible_user }}/.profile.d/flux.sh
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755

- name: install fluxcd asdf plugin
  ansible.builtin.shell: bash -c ". /home/{{ ansible_user }}/.asdf/asdf.sh && asdf plugin-add flux2 {{ fluxcd_asdf_plugin_url }}"
  ignore_errors: true

- name: set global fluxcd version to system
  ansible.builtin.shell: bash -c ". /home/{{ ansible_user }}/.asdf/asdf.sh && asdf global flux2 system"

# Kubeseal
- name: create temporary file for kubeseal download
  tempfile:
    state: file
    suffix: temp
  register: kubeseal_download_tmp

- name: download kubeseal binary
  get_url:
    url: "{{ kubeseal_download_url }}"
    dest: "{{ kubeseal_download_tmp.path }}"
    checksum: "sha256:{{ kubeseal_checksum_url }}"
    force: yes
  changed_when: false

- name: extract kubeseal from archive
  become: yes
  unarchive:
    src: "{{ kubeseal_download_tmp.path }}"
    include: kubeseal
    dest: /usr/local/bin
    remote_src: yes
    owner: root
    group: root
    mode: 0755

# Kind
- name: download kind
  become: yes
  get_url:
    url: "{{ kind_download_url }}"
    dest: "/usr/local/bin/kind"
    checksum: "sha256:{{ kind_checksum_url }}"
    owner: root
    group: root
    mode: 0755

# Istio
- name: create temporary build directory
  become: yes
  tempfile:
    state: directory
    suffix: build
  register: istio_tmp_dir
  changed_when: false

- name: download istio binary
  become: yes
  get_url:
    url: "{{ istio_download_url }}"
    dest: "{{ istio_tmp_dir.path }}"
    checksum: "sha256:{{ istio_checksum_url }}"
  changed_when: false

- name: extract from archive
  become: yes
  unarchive:
    src: "{{ istio_tmp_dir.path }}/{{ istio_filename }}"
    dest: "{{ istio_tmp_dir.path }}"
    owner: root
    group: root
    remote_src: yes

- name: copy istio file to bin
  become: yes
  copy:
    src: "{{ istio_tmp_dir.path }}/istio-{{ istio_version }}/bin/istioctl"
    dest: /usr/local/bin
    owner: root
    group: root
    mode: 0755
    remote_src: yes

- name: install istioctl asdf plugin
  ansible.builtin.shell: bash -c ". /home/{{ ansible_user }}/.asdf/asdf.sh && asdf plugin-add istioctl {{ istio_asdf_plugin_url }}"
  ignore_errors: true

- name: set global istioctl version to system
  ansible.builtin.shell: bash -c ". /home/{{ ansible_user }}/.asdf/asdf.sh && asdf global istioctl system"

# Kubeconform
- name: create temporary build directory
  become: yes
  tempfile:
    state: directory
    suffix: build
  register: kubeconform_tmp_dir
  changed_when: false

- name: download Kubeconform binary
  become: yes
  get_url:
    url: "{{ kubeconform_download_url }}"
    dest: "{{ kubeconform_tmp_dir.path }}"
    checksum: "sha256:{{ kubeconform_checksum_url }}"
  changed_when: false

- name: extract from archive
  become: yes
  unarchive:
    src: "{{ kubeconform_tmp_dir.path }}/{{ kubeconform_filename }}"
    dest: "{{ kubeconform_tmp_dir.path }}"
    owner: root
    group: root
    remote_src: yes

- name: copy kubeconform file to bin
  become: yes
  copy:
    src: "{{ kubeconform_tmp_dir.path }}/kubeconform"
    dest: /usr/local/bin
    owner: root
    group: root
    mode: 0755
    remote_src: yes

# Kustomize
- name: create temporary build directory
  become: yes
  tempfile:
    state: directory
    suffix: build
  register: kustomize_tmp_dir
  changed_when: false

- name: download kustomize binary
  become: yes
  get_url:
    url: "{{ kustomize_download_url }}"
    dest: "{{ kustomize_tmp_dir.path }}"
    checksum: "sha256:{{ kustomize_checksum_url }}"
  changed_when: false

- name: extract from archive
  become: yes
  unarchive:
    src: "{{ kustomize_tmp_dir.path }}/{{ kustomize_filename }}"
    dest: "{{ kustomize_tmp_dir.path }}"
    owner: root
    group: root
    remote_src: yes

- name: copy kustomize file to bin
  become: yes
  copy:
    src: "{{ kustomize_tmp_dir.path }}/kustomize"
    dest: /usr/local/bin
    owner: root
    group: root
    mode: 0755
    remote_src: yes

# Krew
- name: create temporary build directory
  tempfile:
    state: directory
    suffix: build
  register: krew_tmp_dir
  changed_when: false

- name: download minikube checksum
  ansible.builtin.uri:
    url: "{{ krew_checksum_url }}"
    return_content: yes
  register: krew_checksum

- name: download kustomize binary
  get_url:
    url: "{{ krew_download_url }}"
    dest: "{{ krew_tmp_dir.path }}"
    checksum: "sha256:{{ krew_checksum.content }}"
  changed_when: false

- name: extract from archive
  unarchive:
    src: "{{ krew_tmp_dir.path }}/{{ krew_filename }}"
    dest: "{{ krew_tmp_dir.path }}"
    remote_src: yes

- name: install krew
  command: "{{ krew_tmp_dir.path }}/krew-linux_amd64 install krew"

- name: ensure user profile directory exists
  become: yes
  ansible.builtin.file:
    dest: /home/{{ ansible_user }}/.profile.d
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755

- name: define krew variables
  become: yes
  template:
    src: user_krew.sh.j2
    dest: /home/{{ ansible_user }}/.profile.d/krew.sh
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0755

- name: install kubectx
  ansible.builtin.shell: "source /home/{{ ansible_user }}/.profile.d/krew.sh && kubectl krew install ctx"
  args:
    executable: /bin/bash

- name: install kubens
  ansible.builtin.shell: "source /home/{{ ansible_user }}/.profile.d/krew.sh && kubectl krew install ns"
  args:
    executable: /bin/bash

# k9s

- name: create temporary build directory
  become: yes
  tempfile:
    state: directory
    suffix: build
  register: k9s_tmp_dir
  changed_when: false

- name: download k9s binary
  become: yes
  get_url:
    url: "{{ k9s_download_url }}"
    dest: "{{ k9s_tmp_dir.path }}"
    checksum: "sha256:{{ k9s_checksum_url }}"
  changed_when: false

- name: extract from archive
  become: yes
  unarchive:
    src: "{{ k9s_tmp_dir.path }}/{{ k9s_filename }}"
    dest: "{{ k9s_tmp_dir.path }}"
    owner: root
    group: root
    remote_src: yes

- name: copy k9s file to bin
  become: yes
  copy:
    src: "{{ k9s_tmp_dir.path }}/k9s"
    dest: /usr/local/bin
    owner: root
    group: root
    mode: 0755
    remote_src: yes
