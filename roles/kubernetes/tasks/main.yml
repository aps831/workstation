---
# Minikube
- name: Download minikube checksum
  ansible.builtin.uri:
    url: "{{ minikube_checksum_url }}"
    return_content: true
  register: minikube_checksum

- name: Download minikube
  become: true
  ansible.builtin.get_url:
    url: "{{ minikube_download_url }}"
    dest: /usr/local/bin/minikube
    checksum: "sha256:{{ minikube_checksum.content }}"
    owner: root
    group: root
    mode: "0755"

# Lens
- name: Create temporary file for key
  become: true
  ansible.builtin.tempfile:
    state: file
    suffix: temp
  register: key_temp_file
  changed_when: false

- name: Download key
  become: true
  ansible.builtin.get_url:
    url: https://downloads.k8slens.dev/keys/gpg
    dest: "{{ key_temp_file.path }}"
    force: true

- name: Dearmor key
  become: true
  ansible.builtin.shell:
    cmd: cat {{ key_temp_file.path }} | gpg --dearmor >> /usr/share/keyrings/lens-archive-keyring.gpg

- name: Add lens repository
  become: true
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/lens-archive-keyring.gpg] https://downloads.k8slens.dev/apt/debian stable main"
    filename: "lens"
    state: present

- name: Install lens
  become: true
  ansible.builtin.apt:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
      - lens

# Helm
- name: Create temporary build directory
  become: true
  ansible.builtin.tempfile:
    state: directory
    suffix: build
  register: helm_tmp_dir
  changed_when: false

- name: Download helm binary
  become: true
  ansible.builtin.get_url:
    url: "{{ helm_download_url }}"
    dest: "{{ helm_tmp_dir.path }}"
    checksum: "sha256:{{ helm_checksum_url }}"
  changed_when: false

- name: Extract from archive
  become: true
  ansible.builtin.unarchive:
    src: "{{ helm_tmp_dir.path }}/{{ helm_filename }}"
    dest: "{{ helm_tmp_dir.path }}"
    owner: root
    group: root
    remote_src: true

- name: Copy helm file to bin
  become: true
  ansible.builtin.copy:
    src: "{{ helm_tmp_dir.path }}/linux-amd64/helm"
    dest: /usr/local/bin
    owner: root
    group: root
    mode: "0755"
    remote_src: true

- name: Download helmfile binary
  become: true
  ansible.builtin.get_url:
    url: "{{ helmfile_download_url }}"
    dest: /usr/local/bin/helmfile
    owner: root
    group: root
    mode: "0755"

# Sops
- name: Install sops
  become: true
  ansible.builtin.apt:
    deb: "{{ sops_download_url }}"

# Fluxcd
- name: Create temporary file for fluxcd download
  ansible.builtin.tempfile:
    state: file
    suffix: temp
  register: fluxcd_download_tmp

- name: Download fluxcd binary
  ansible.builtin.get_url:
    url: "{{ fluxcd_download_url }}"
    dest: "{{ fluxcd_download_tmp.path }}"
    checksum: "sha256:{{ fluxcd_checksum_url }}"
    force: true
  changed_when: false

- name: Extract fluxcd from archive
  become: true
  ansible.builtin.unarchive:
    src: "{{ fluxcd_download_tmp.path }}"
    include: flux
    dest: /usr/local/bin
    remote_src: true
    owner: root
    group: root
    mode: "0755"

- name: Ensure user profile directory exists
  become: true
  ansible.builtin.file:
    dest: /home/{{ ansible_user }}/.profile.d
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0775"

- name: Add flux auto completion
  become: true
  ansible.builtin.template:
    src: flux.sh.j2
    dest: /home/{{ ansible_user }}/.profile.d/flux.sh
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"

# Kubeseal
- name: Create temporary file for kubeseal download
  ansible.builtin.tempfile:
    state: file
    suffix: temp
  register: kubeseal_download_tmp

- name: Download kubeseal binary
  ansible.builtin.get_url:
    url: "{{ kubeseal_download_url }}"
    dest: "{{ kubeseal_download_tmp.path }}"
    checksum: "sha256:{{ kubeseal_checksum_url }}"
    force: true
  changed_when: false

- name: Extract kubeseal from archive
  become: true
  ansible.builtin.unarchive:
    src: "{{ kubeseal_download_tmp.path }}"
    include: kubeseal
    dest: /usr/local/bin
    remote_src: true
    owner: root
    group: root
    mode: "0755"

# Kind
- name: Download kind
  become: true
  ansible.builtin.get_url:
    url: "{{ kind_download_url }}"
    dest: "/usr/local/bin/kind"
    checksum: "sha256:{{ kind_checksum_url }}"
    owner: root
    group: root
    mode: "0755"

# Istio
- name: Create temporary build directory
  become: true
  ansible.builtin.tempfile:
    state: directory
    suffix: build
  register: istio_tmp_dir
  changed_when: false

- name: Download istio binary
  become: true
  ansible.builtin.get_url:
    url: "{{ istio_download_url }}"
    dest: "{{ istio_tmp_dir.path }}"
    checksum: "sha256:{{ istio_checksum_url }}"
  changed_when: false

- name: Extract from archive
  become: true
  ansible.builtin.unarchive:
    src: "{{ istio_tmp_dir.path }}/{{ istio_filename }}"
    dest: "{{ istio_tmp_dir.path }}"
    owner: root
    group: root
    remote_src: true

- name: Copy istio file to bin
  become: true
  ansible.builtin.copy:
    src: "{{ istio_tmp_dir.path }}/istio-{{ istio_version }}/bin/istioctl"
    dest: /usr/local/bin
    owner: root
    group: root
    mode: "0755"
    remote_src: true

# Kubeconform
- name: Create temporary build directory
  become: true
  ansible.builtin.tempfile:
    state: directory
    suffix: build
  register: kubeconform_tmp_dir
  changed_when: false

- name: Download Kubeconform binary
  become: true
  ansible.builtin.get_url:
    url: "{{ kubeconform_download_url }}"
    dest: "{{ kubeconform_tmp_dir.path }}"
    checksum: "sha256:{{ kubeconform_checksum_url }}"
  changed_when: false

- name: Extract from archive
  become: true
  ansible.builtin.unarchive:
    src: "{{ kubeconform_tmp_dir.path }}/{{ kubeconform_filename }}"
    dest: "{{ kubeconform_tmp_dir.path }}"
    owner: root
    group: root
    remote_src: true

- name: Copy kubeconform file to bin
  become: true
  ansible.builtin.copy:
    src: "{{ kubeconform_tmp_dir.path }}/kubeconform"
    dest: /usr/local/bin
    owner: root
    group: root
    mode: "0755"
    remote_src: true

# Kustomize
- name: Create temporary build directory
  become: true
  ansible.builtin.tempfile:
    state: directory
    suffix: build
  register: kustomize_tmp_dir
  changed_when: false

- name: Download kustomize binary
  become: true
  ansible.builtin.get_url:
    url: "{{ kustomize_download_url }}"
    dest: "{{ kustomize_tmp_dir.path }}"
    checksum: "sha256:{{ kustomize_checksum_url }}"
  changed_when: false

- name: Extract from archive
  become: true
  ansible.builtin.unarchive:
    src: "{{ kustomize_tmp_dir.path }}/{{ kustomize_filename }}"
    dest: "{{ kustomize_tmp_dir.path }}"
    owner: root
    group: root
    remote_src: true

- name: Copy kustomize file to bin
  become: true
  ansible.builtin.copy:
    src: "{{ kustomize_tmp_dir.path }}/kustomize"
    dest: /usr/local/bin
    owner: root
    group: root
    mode: "0755"
    remote_src: true

# Krew
- name: Create temporary build directory
  ansible.builtin.tempfile:
    state: directory
    suffix: build
  register: krew_tmp_dir
  changed_when: false

- name: Download minikube checksum
  ansible.builtin.uri:
    url: "{{ krew_checksum_url }}"
    return_content: true
  register: krew_checksum

- name: Download kustomize binary
  ansible.builtin.get_url:
    url: "{{ krew_download_url }}"
    dest: "{{ krew_tmp_dir.path }}"
    checksum: "sha256:{{ krew_checksum.content }}"
  changed_when: false

- name: Extract from archive
  ansible.builtin.unarchive:
    src: "{{ krew_tmp_dir.path }}/{{ krew_filename }}"
    dest: "{{ krew_tmp_dir.path }}"
    remote_src: true

- name: Install krew
  ansible.builtin.command: "{{ krew_tmp_dir.path }}/krew-linux_amd64 install krew"
- name: Ensure user profile directory exists
  become: true
  ansible.builtin.file:
    dest: /home/{{ ansible_user }}/.profile.d
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0775"

- name: Define krew variables
  become: true
  ansible.builtin.template:
    src: user_krew.sh.j2
    dest: /home/{{ ansible_user }}/.profile.d/krew.sh
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"

- name: Install kubectx
  ansible.builtin.shell: "source /home/{{ ansible_user }}/.profile.d/krew.sh && kubectl krew install ctx"
  args:
    executable: /bin/bash

- name: Install kubens
  ansible.builtin.shell: "source /home/{{ ansible_user }}/.profile.d/krew.sh && kubectl krew install ns"
  args:
    executable: /bin/bash

# k9s

- name: Create temporary build directory
  become: true
  ansible.builtin.tempfile:
    state: directory
    suffix: build
  register: k9s_tmp_dir
  changed_when: false

- name: Download k9s binary
  become: true
  ansible.builtin.get_url:
    url: "{{ k9s_download_url }}"
    dest: "{{ k9s_tmp_dir.path }}"
    checksum: "sha256:{{ k9s_checksum_url }}"
  changed_when: false

- name: Extract from archive
  become: true
  ansible.builtin.unarchive:
    src: "{{ k9s_tmp_dir.path }}/{{ k9s_filename }}"
    dest: "{{ k9s_tmp_dir.path }}"
    owner: root
    group: root
    remote_src: true

- name: Copy k9s file to bin
  become: true
  ansible.builtin.copy:
    src: "{{ k9s_tmp_dir.path }}/k9s"
    dest: /usr/local/bin
    owner: root
    group: root
    mode: "0755"
    remote_src: true
