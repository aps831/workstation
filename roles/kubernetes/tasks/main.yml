---
# Minikube
 - name: download minikube
   become: true
   get_url:
     url: "{{ minikube_download_url }}"
     checksum: "{{ minikube_checksum }}"
     dest: /usr/local/bin/minikube
     owner: root
     group: root
     mode: 0755

# Lens
 - name: install lens
   become: yes
   apt:
      deb: "{{ lens_download_url }}"

# Helm
 - name: create temporary build directory
   tempfile:
     state: directory
     suffix: build
   register: tmp_dir
   changed_when: false

 - name: download helm binary
   get_url:
     url: "{{ helm_download_url }}"
     dest: "{{ tmp_dir.path }}"
   changed_when: false

 - name: extract from archive
   unarchive:
     src: "{{ tmp_dir.path }}/{{ helm_filename }}"
     dest: "{{ tmp_dir.path }}"
     owner: root
     group: root
     remote_src: yes

 - name: copy helm file to bin
   become: yes
   copy:
     src: "{{ tmp_dir.path }}/linux-amd64/helm"
     dest: /usr/local/bin
     owner: root
     group: root
     mode: 0755

 - name: install helm secrets
   command: helm plugin install https://github.com/jkroepke/helm-secrets --version v{{ helm_secrets_version }}
   ignore_errors: yes

 - name: install helm diff
   command: helm plugin install https://github.com/databus23/helm-diff --version master
   ignore_errors: yes

 - name: download helmfile binary
   become: yes
   get_url:
     url: "{{ helmfile_download_url }}"
     dest: /usr/local/bin/helmfile
     owner: root
     group: root
     mode: 0755

# Sops
 - name: install sops
   become: yes
   apt:
      deb: "{{ sops_download_url }}"

# Fluxcd
 - name: create temporary file for fluxcd download
   tempfile:
     state: file
     suffix: temp
   register: fluxcd_download_tmp

 - name: download fluxcd binary
   get_url:
     url: "{{ fluxcd_download_url }}"
     dest: "{{ fluxcd_download_tmp.path }}"
     checksum: "sha256:{{ fluxcd_checksum_url }}"
     force: yes
   changed_when: false

 - name: extract fluxcd from archive
   become: yes
   unarchive:
     src: "{{ fluxcd_download_tmp.path }}"
     include: flux
     dest: /usr/local/bin
     remote_src: yes
     owner: root
     group: root
     mode: 0755

# Kubeseal
 - name: create temporary file for kubeseal download
   tempfile:
     state: file
     suffix: temp
   register: kubeseal_download_tmp

 - name: download kubeseal binary
   get_url:
     url: "{{ kubeseal_download_url }}"
     dest: "{{ kubeseal_download_tmp.path }}"
     checksum: "sha256:{{ kubeseal_checksum_url }}"
     force: yes
   changed_when: false

 - name: extract kubeseal from archive
   become: yes
   unarchive:
     src: "{{ kubeseal_download_tmp.path }}"
     include: kubeseal
     dest: /usr/local/bin
     remote_src: yes
     owner: root
     group: root
     mode: 0755

# Kind
 - name: download kind
   become: yes
   get_url:
     url: "{{ kind_download_url }}"
     dest: "/usr/local/bin/kind"
     owner: root
     group: root
     mode: 0755

