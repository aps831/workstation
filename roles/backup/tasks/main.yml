---
# Packages
- name: install backup packages
  become: true
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      - cron
      - timeshift

# Duplicacy config
- name: "create duplicacy config directory"
  become: true
  file:
    path: "/home/{{ backup_user }}/.duplicacy/"
    state: directory
    owner: "{{ backup_user }}"
    group: "{{ backup_user }}"
    mode: "0700"
    recurse: yes

- name: "install {{ backup_user }} preferences"
  become: true
  template:
    src: "{{ backup_host }}/{{ backup_user }}/preferences.j2"
    dest: "/home/{{ backup_user }}/.duplicacy/preferences"
    owner: "{{ backup_user }}"
    group: "{{ backup_user }}"
    mode: "0600"

- name: "install {{ backup_user }} filters"
  become: true
  template:
    src: "{{ backup_host }}/{{ backup_user }}/filters.j2"
    dest: "/home/{{ backup_user }}/.duplicacy/filters"
    owner: "{{ backup_user }}"
    group: "{{ backup_user }}"
    mode: "0600"

# Log directories
- name: "create directory for backup logs"
  become: true
  file:
    path: "/var/log/duplicacy/"
    state: directory
    owner: "root"
    group: "root"
    mode: "0755"
    recurse: yes

- name: "create directory for {{ backup_user }} backup logs"
  become: true
  file:
    path: "/var/log/duplicacy/{{ backup_user }}_backup"
    state: directory
    owner: "{{ backup_user }}"
    group: "{{ backup_user }}"
    mode: "0755"
    recurse: yes

- name: "create directory for {{ backup_user }} backup test logs"
  become: true
  file:
    path: "/var/log/duplicacy/{{ backup_user }}_backup_test"
    state: directory
    owner: "{{ backup_user }}"
    group: "{{ backup_user }}"
    mode: "0755"
    recurse: yes

# Scripts
- name: "install {{ backup_user }} backup script"
  become: true
  template:
    src: "backup.sh.j2"
    dest: "/usr/local/sbin/{{ backup_user }}_backup.sh"
    owner: "{{ backup_user }}"
    group: "{{ backup_user }}"
    mode: "0700"

- name: "install {{ backup_user }} backup test script"
  become: true
  template:
    src: "test.sh.j2"
    dest: "/usr/local/sbin/{{ backup_user }}_backup_test.sh"
    owner: "{{ backup_user }}"
    group: "{{ backup_user }}"
    mode: "0700"

# Services
- name: "install {{ backup_user }} backup service"
  become: true
  template:
    src: "backup.service.j2"
    dest: "/etc/systemd/system/{{ backup_user }}_backup.service"
    owner: "{{ backup_user }}"
    group: "{{ backup_user }}"
    mode: 0644

- name: "install {{ backup_user }} backup test service"
  become: true
  template:
    src: "test.service.j2"
    dest: "/etc/systemd/system/{{ backup_user }}_backup_test.service"
    owner: "{{ backup_user }}"
    group: "{{ backup_user }}"
    mode: 0644

# Timers
- name: "install {{ backup_user }} backup timer"
  become: true
  template:
    src: "backup.timer.j2"
    dest: "/etc/systemd/system/{{ backup_user }}_backup.timer"
    owner: "{{ backup_user }}"
    group: "{{ backup_user }}"
    mode: 0644

- name: "install {{ backup_user }} backup test timer"
  become: true
  template:
    src: "test.timer.j2"
    dest: "/etc/systemd/system/{{ backup_user }}_backup_test.timer"
    owner: "{{ backup_user }}"
    group: "{{ backup_user }}"
    mode: 0644

# Disable services
- name: disable {{ backup_user }} backup service
  become: true
  systemd:
    name: "{{ backup_user }}_backup"
    enabled: no

- name: disable {{ backup_user }} backup test service
  become: true
  systemd:
    name: "{{ backup_user }}_backup_test"
    enabled: no

# Enable timers
- name: enable {{ backup_user }} backup timer
  become: true
  systemd:
    name: "{{ backup_user }}_backup.timer"
    state: started
    enabled: yes

- name: enable {{ backup_user }} backup test timer
  become: true
  systemd:
    name: "{{ backup_user }}_backup_test.timer"
    state: started
    enabled: yes

# Config backup
- name: backup duplicacy preferences
  shell: cat /home/{{ backup_user }}/.duplicacy/preferences | doppler secrets -p workstation -c {{ backup_host }} set {{ backup_doppler_duplicacy_preferences }}

- name: backup duplicacy filters
  shell: cat /home/{{ backup_user }}/.duplicacy/filters | doppler secrets -p workstation -c {{ backup_host }} set {{ backup_doppler_duplicacy_filters }}

# Restore scripts
- name: Install restore backup script
  ansible.builtin.copy:
    src: restore-backup-from-odin.{{ inventory_hostname }}
    dest: /home/{{ ansible_user }}/.local/bin/restore-backup-from-odin
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0744"
