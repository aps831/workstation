---
#
# Docker
#
- name: install packages
  become: yes
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - jq

- name: Add docker signing key
  become: true
  get_url:
    url: "https://download.docker.com/linux/ubuntu/gpg"
    dest: /usr/share/keyrings/docker-keyring.asc
    mode: 0644
    force: true

- name: Add docker repo
  become: true
  apt_repository:
    repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-keyring.asc] https://download.docker.com/linux/ubuntu {{ ubuntu_codename }} stable"
    filename: docker
    state: present

- name: install docker
  become: yes
  apt:
    name: docker-ce
    state: present
  notify: restart docker

- name: install bash-completion
  become: yes
  apt:
    name: bash-completion
    state: present

- name: notify handlers to avoid firewall conflicts
  meta: flush_handlers

- name: ensure docker group exists
  become: yes
  group:
    name: docker
    state: present

- name: "ensure user '{{ ansible_user }}' is in docker group"
  become: yes
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes

- name: ensure docker is enabled at boot
  become: yes
  systemd:
    name: docker
    enabled: yes

#
# SBOM
#
- name: docker sbom plugin
  shell: curl -sSfL https://raw.githubusercontent.com/docker/sbom-cli-plugin/main/install.sh | sh -s --

#
# Docker Compose
#

- name: ensure docker plugins parent directory exists
  become: yes
  ansible.builtin.file:
    path: "/usr/local/lib/docker"
    state: directory
    mode: "0755"

- name: ensure docker plugins directory exists
  become: yes
  ansible.builtin.file:
    path: "/usr/local/lib/docker/cli-plugins"
    state: directory
    mode: "0755"

- name: install docker compose
  become: yes
  get_url:
    url: "{{ docker_compose_download_url }}"
    dest: "/usr/local/lib/docker/cli-plugins/docker-compose"
    checksum: "sha256:{{ docker_compose_sha256_url }}"
    mode: "0755"

#
# Firewall
#
- name: set default forward policy to accept for firewall
  become: yes
  ufw: direction=routed
    default=allow
    route=yes
  notify: reload ufw

- name: get ip address of docker interface
  shell: ifconfig docker0 | grep 'inet ' | awk '{print $2}'
  register: ip
  changed_when: false

- name: allow connections from docker interface through firewall
  become: yes
  ufw:
    rule: allow
    src: "{{ ip.stdout }}/24"
  notify: reload ufw

#
# Daemon configuration
#

- name: docker daemon configuration
  become: yes
  environment:
    REGISTRY_MIRROR: "http://localhost:{{ dockerhub_mirror_container_port }}"
  shell: |
    set -e
    echo "{}" > /etc/docker/daemon.json
    cat /etc/docker/daemon.json   | jq                                   '.dns |= [ "8.8.8.8", "8.8.4.4" ]'   -- > /etc/docker/daemon.json.1
    cat /etc/docker/daemon.json.1 | jq --arg mirror  "$REGISTRY_MIRROR"  '."registry-mirrors" |= [ $mirror ]' -- > /etc/docker/daemon.json.2
    cat /etc/docker/daemon.json.2 | jq                                   '.features.buildkit  |= true'        -- > /etc/docker/daemon.json.3
    rm /etc/docker/daemon.json.1
    rm /etc/docker/daemon.json.2
    mv /etc/docker/daemon.json.3 /etc/docker/daemon.json
  notify: restart docker

#
# Dockerhub mirror
#
- name: create directory for dockerhub mirror
  become: yes
  file: path=/var/lib/dockerhub-mirror
    state=directory

- name: copy dockerhub mirror config
  become: yes
  copy:
    src: dockerhubmirrorconfig.yml
    dest: /var/lib/dockerhub-mirror/config.yml

- name: create script for dockerhub mirror service
  become: yes
  template:
    src: dockerhubmirror.sh.j2
    dest: /usr/share/systemd/dockerhubmirror.sh
    mode: 0744

- name: create dockerhubmirror service
  become: yes
  template:
    src: dockerhubmirror.service.j2
    dest: /etc/systemd/system/dockerhubmirror.service

- name: enable dockerhub mirror service at boot
  become: yes
  systemd:
    name: dockerhubmirror
    enabled: yes

#
# Docker Credential Helper
#
- name: create temporary build directory
  tempfile:
    state: directory
    suffix: build
  register: tmp_dir
  changed_when: false

- name: download docker credential helper
  become: yes
  get_url:
    url: "{{ docker_credential_helper_url }}"
    dest: "{{ tmp_dir.path }}"

- name: unpack docker credential helper
  become: yes
  unarchive:
    src: "{{ tmp_dir.path }}/{{ docker_credential_helper_filename }}"
    dest: "{{ docker_credential_helper_install_dir }}"
    owner: root
    group: root
    mode: 0755
    remote_src: yes
