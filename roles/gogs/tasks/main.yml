---

 - name: install packages
   become: yes
   apt:
     name: "{{ packages }}"
   vars:
     packages:
     - unzip

 - name: check if gogs is already installed
   become: yes
   stat:
     path: "{{ gogs_user_home }}/gogs"
   register: gogs_dir

 - name: download gogs
   become: yes
   get_url:
     url: "{{ gogs_binary_url }}"
     dest: "{{ gogs_user_home }}/gogs.zip"
     owner: "{{ gogs_user }}"
     group: "{{ gogs_user }}"
   when: not gogs_dir.stat.exists

 - name: expand gogs
   become: yes
   unarchive:
     src: "{{ gogs_user_home }}/gogs.zip"
     dest: "{{ gogs_user_home }}"
     group: "{{ gogs_user }}"
     owner: "{{ gogs_user }}"
     copy: false
     mode: 0755
   when: not gogs_dir.stat.exists

 - name: delete gogs zip
   become: yes
   file:
     path: "{{ gogs_user_home }}/gogs.zip"
     state: absent

 - name: create gogs log folder
   become: yes
   file:
     path: "{{ gogs_user_home }}/gogs/log"
     state: directory
     owner: "{{ gogs_user }}"
     group: "{{ gogs_user }}"
     mode: 0755

 - name: symlink gogs binary
   become: yes
   file:  # noqa 208
     src: "{{ gogs_user_home }}/gogs/gogs"
     dest: "/usr/local/bin/gogs"
     state: link
   notify: restart gogs

 - name: create systemd service
   become: yes
   template:
     src: gogs.service.j2
     dest: /etc/systemd/system/gogs.service
     owner: root
     group: root
     mode: 0755
   notify: restart gogs

 - name: enable service at boot
   become: yes
   systemd:
     name: gogs
     daemon_reload: yes
     enabled: yes

 - name: "allow connections from {{ gogs_ufw_allow_host }}"
   become: yes
   ufw:
     rule: allow
     src: "{{ gogs_ufw_allow_host }}"
     port: "{{ gogs_http_port }}"
